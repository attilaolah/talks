math/big
because int64 overflows
17:00 21 Aug 2014
Tags: math


Attila Oláh
maker of things, stor.es
attila@attilaolah.eu
http://attilaolah.eu
@attilaolah


* Assignemnt: Fibonacci server

- GET /fib/37 ➡ 24157817


* Assignemnt: Fibonacci server

- GET /fib/37 ➡ 24157817 (*~500* *ns/enc*, ~60 ns/op)

.play fib_1/fib_1.go /START/,/END/


* Issue #1: big numbers

- GET /fib/37 ➡ 24157817 (~500 ns/enc, ~60 ns/op)
- GET /fib/93 ➡ *12200160415121876738*


* Issue #1: big numbers

- GET /fib/37 ➡ 24157817 (*~5000* *ns/enc*, ~3200 ns/op)
- GET /fib/93 ➡ 12200160415121876738 (*~6500* *ns/enc*, ~6500 ns/op)

.play fib_2/fib_2.go /START/,/END/


* Issue #2: batch results

- GET /fib/37 ➡ 24157817 (~5000 ns/enc, ~3200 ns/op)
- GET /fib/93 ➡ 12200160415121876738 (~6500 ns/enc, ~6500 ns/op)
- GET /fib/12..18 ➡ *[144,233,377,610,987,1597]*


* Issue #2: batch results

- GET /fib/37 ➡ 24157817 (~5000 ns/enc, ~3200 ns/op)
- GET /fib/93 ➡ 12200160415121876738 (~6500 ns/enc, ~6500 ns/op)
- GET /fib/12..18 ➡ [144,233,377,610,987,1597] (*~23000* *ns/enc*, ~12500 ns/op)

.play fib_3/fib_3.go /START1/,/END1/


* Issue #2: batch results

- GET /fib/37 ➡ 24157817 (~5000 ns/enc, ~3200 ns/op)
- GET /fib/93 ➡ 12200160415121876738 (~6500 ns/enc, ~6500 ns/op)
- GET /fib/12..18 ➡ [144,233,377,610,987,1597] (*~23000* *ns/enc*, ~12500 ns/op)

.play fib_3/fib_3.go /START2/,/END2/


* Issue #3: faster batch results

- GET /fib/37 ➡ 24157817 (~5000 ns/enc, ~3200 ns/op)
- GET /fib/93 ➡ 12200160415121876738 (~6500 ns/enc, ~6500 ns/op)
- GET /fib/12..18 ➡ [144,233,377,610,987,1597] (*~23000* *ns/enc*, ~12500 ns/op)


* Issue #3: faster batch results

- GET /fib/37 ➡ 24157817 (~5000 ns/enc, ~3200 ns/op)
- GET /fib/93 ➡ 12200160415121876738 (~6500 ns/enc, ~6500 ns/op)
- GET /fib/12..18 ➡ *…*

.play fib_4/fib_4.go /START/,/END/ HLWTF


* Issue #3: faster batch results

- GET /fib/37 ➡ 24157817 (~5000 ns/enc, ~3200 ns/op)
- GET /fib/93 ➡ 12200160415121876738 (~6500 ns/enc, ~6500 ns/op)
- GET /fib/12..18 ➡ *[2584,4181,2584,4181,2584,4181]* — *⸘WTF‽*

.play fib_4/fib_4.go /START/,/END/ HLWTF

* Issue #3: faster batch results

- GET /fib/37 ➡ 24157817 (~5000 ns/enc, ~3200 ns/op)
- GET /fib/93 ➡ 12200160415121876738 (~6500 ns/enc, ~6500 ns/op)
- GET /fib/12..18 ➡ *…*

.play fib_5/fib_5.go /START/,/END/ HLWTF


* Issue #3: faster batch results

- GET /fib/37 ➡ 24157817 (~5000 ns/enc, ~3200 ns/op)
- GET /fib/93 ➡ 12200160415121876738 (~6500 ns/enc, ~6500 ns/op)
- GET /fib/12..18 ➡ *[2584,4181,2584,4181,2584,4181]* — *⸘WTF‽*

.play fib_5/fib_5.go /START/,/END/ HLWTF

* Issue #3: faster batch results

- GET /fib/37 ➡ 24157817 (~5000 ns/enc, ~3200 ns/op)
- GET /fib/93 ➡ 12200160415121876738 (~6500 ns/enc, ~6500 ns/op)
- GET /fib/12..18 ➡ *…*

.play fib_6/fib_6.go /START/,/END/


* Issue #3: faster batch results

- GET /fib/37 ➡ 24157817 (~5000 ns/enc, ~3200 ns/op)
- GET /fib/93 ➡ 12200160415121876738 (~6500 ns/enc, ~6500 ns/op)
- GET /fib/12..18 ➡ [144,233,377,610,987,1597] (*~16000* *ns/enc*, ~5900 ns/op)

.play fib_6/fib_6.go /START/,/END/


* Issue #4: even faster batch results

- GET /fib/37 ➡ 24157817 (~5000 ns/enc, ~3200 ns/op)
- GET /fib/93 ➡ 12200160415121876738 (~6500 ns/enc, ~6500 ns/op)
- GET /fib/12..18 ➡ [144,233,377,610,987,1597] (*~16000* *ns/enc*, ~5900 ns/op)


* Issue #4: even faster batch results

- GET /fib/37 ➡ 24157817 (~5000 ns/enc, ~3200 ns/op)
- GET /fib/93 ➡ 12200160415121876738 (~6500 ns/enc, ~6500 ns/op)
- GET /fib/12..18 ➡ [144,233,377,610,987,1597] (*~13000* *ns/enc*)

.play fib_7/fib_7.go /START/,/END/


* Issue #4: even faster batch results

- GET /fib/37 ➡ 24157817 (~5000 ns/enc, ~3200 ns/op)
- GET /fib/93 ➡ 12200160415121876738 (~6500 ns/enc, ~6500 ns/op)
- GET /fib/12..18: *~23000* *ns/enc* ➡ *~13000* *ns/enc*
- GET /fib/1234..5678: *~960* *ms/enc* ➡ *~170* *ms/enc*


* big.Int: the good

- implements fmt.Formatter
- implements json.Marshaler, json.Unmarshaler
- implements encoding.TextMarshaler, encoding.TextUnmarshaler
- implements gob.GobEncoder, gob.GobDecoder
- mostly fast enough


* big.Int: the ugly

- hideous code
- Ruby: 12**34
- Python: 12**34
- Go: big.NewInt(0).Exp(big.NewInt(12), big.NewInt(34), nil)


* big.Int: the tricks

- *mutable*, must be careful!
- work with pointers, do not copy
- replace when possible

.code tricks.go /START1/,/END2/


* big.Int: drop-in replacement

.code tricks.go /STARTI/,/ENDI/

.link https://github.com/ncw/gmp github.com/ncw/gmp
.link https://github.com/ncw/gmp/issues/1#issuecomment-44771441 banchmarks
